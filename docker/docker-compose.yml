version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: n8n-platform-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n_platform
      POSTGRES_USER: n8n_platform
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_platform_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_platform -d n8n_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: n8n-platform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # N8N实例
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-platform-n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_platform
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n_platform_password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - WEBHOOK_URL=http://localhost:5679/
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      - GENERIC_TIMEZONE=Asia/Shanghai
    ports:
      - "5679:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/custom-nodes:/home/node/.n8n/custom
      - ./n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: n8n-platform-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DATABASE_URL=postgresql://n8n_platform:${POSTGRES_PASSWORD:-n8n_platform_password}@postgres:5432/n8n_platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - FRONTEND_URL=http://localhost:3000
      - N8N_API_URL=http://n8n:5678
      - N8N_WEBHOOK_URL=http://localhost:5679
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: n8n-platform-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
      - VITE_N8N_URL=http://localhost:5679
      - VITE_SOCKET_URL=http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP服务集成
  mcp-integration:
    build:
      context: ../mcp-integration
      dockerfile: Dockerfile
    container_name: n8n-platform-mcp
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_PORT=9000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - N8N_API_URL=http://n8n:5678
      - BACKEND_API_URL=http://backend:8000
    ports:
      - "9000:9000"
    volumes:
      - mcp_data:/app/data
      - ./mcp-integration/config:/app/config
    depends_on:
      - redis
      - backend
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: n8n-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - n8n
    networks:
      - n8n-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-platform-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - n8n-platform-network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-platform-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - n8n-platform-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  mcp_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  n8n-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
